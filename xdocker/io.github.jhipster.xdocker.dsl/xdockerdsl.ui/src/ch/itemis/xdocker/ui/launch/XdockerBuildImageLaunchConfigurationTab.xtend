/** 
 * Copyright (c) 2015 itemis Schweiz GmbH (http://www.itemis-schweiz.ch) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package ch.itemis.xdocker.ui.launch

import ch.itemis.xdocker.ui.launch.AbstractXdockerLaunchConfigurationTab.DefaultSelectionListener
import org.eclipse.debug.core.ILaunchConfiguration
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy
import org.eclipse.debug.ui.ILaunchConfigurationTab
import org.eclipse.swt.SWT
import org.eclipse.swt.events.SelectionAdapter
import org.eclipse.swt.events.SelectionEvent
import org.eclipse.swt.layout.GridData
import org.eclipse.swt.layout.GridLayout
import org.eclipse.swt.widgets.Button
import org.eclipse.swt.widgets.Composite
import org.eclipse.swt.widgets.Group
import org.eclipse.swt.widgets.Text

import static ch.itemis.xdocker.ui.launch.shortcut.XdockerBuildLaunchConfigData.*
import static org.eclipse.debug.internal.ui.SWTFactory.*

/** 
 * Xdocker Build Image Launch Configuration Tab Class
 * 
 * @author Serano Colameo - Initial contribution and API
 */
@SuppressWarnings('restriction')
class XdockerBuildImageLaunchConfigurationTab extends AbstractXdockerLaunchConfigurationTab {

	val NAME = 'Build Image'
	
	// mandatory parameters
	var Text projectText
	var Text xdockerFileText
	var Text dockerTagText
	var Button projectButton
	var Button xdockerFileButton
	// optional parameters
	var Button paramsCheckButton
	var Button quiteCheckButton
	var Button noCacheCheckButton
	var Button rmCheckButton
	var Button pullCheckButton
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#createControl(org.eclipse.swt.widgets.Composite)
     */
	override void createControl(Composite parent) {
		val mainGroup = parent.createMainGroup
		
		new GridData(GridData.FILL_HORIZONTAL) => [
			horizontalSpan = 2 
			mainGroup.layoutData = it 		
		]
		
		paramsCheckButton.selection = false
		
		mainGroup => [
			quiteCheckButton = createCheckButton('Quite - Suppress verbose output generated by the containers')
			noCacheCheckButton = createCheckButton('No Cache - Do not use cache when building the image')
			pullCheckButton = createCheckButton('Pull a newer version of the image')
			rmCheckButton = createCheckButton('Remove intermediate containers after a successful build (--rm)')
		]

		val gd = new GridData(GridData.FILL_HORIZONTAL) => [horizontalSpan = 2]
		val dockerCheckButtons = #[quiteCheckButton, noCacheCheckButton, rmCheckButton, pullCheckButton]
		
		dockerCheckButtons.forEach[
			enabled = false
			layoutData = gd
			addSelectionListener = new SelectionAdapter {
				override void widgetSelected(SelectionEvent e) {
					updateLaunchConfigurationDialog
					launchConfigurationDialog.updateButtons
				}
			} 
		]
		
		val dockerTagGroup = mainGroup.createDockerTagEditor		
		val dockerElements = #[dockerTagGroup, dockerTagText] + dockerCheckButtons
		
		paramsCheckButton.addSelectionListener = new SelectionAdapter {
			override void widgetSelected(SelectionEvent e) {
				dockerElements.forEach[enabled = paramsCheckButton.selection]
				updateLaunchConfigurationDialog
			}
		}
	}

	def private Composite createMainGroup(Composite parent) {
		val mainComposite = new Composite(parent, SWT.NONE) 
		val mainLayout = new GridLayout
		control = mainComposite 
		
		mainComposite => [
			layout = mainLayout
			layoutData = new GridData(GridData.FILL_HORIZONTAL)
			font = parent.font
			createProjectEditor
			createXdockerFileEditor 
			createCheckButton('Docker Build Parameter') => [
				paramsCheckButton = it
				addSelectionListener = new DefaultSelectionListener {
					override widgetSelected(SelectionEvent e) {
						launchConfigurationDialog.updateButtons
					}
				}	
			]
		]
		
		return new Group(mainComposite, SWT.NONE) => [
			font = mainComposite.font
			layout = mainLayout
		]
	}
		def protected Group createProjectEditor(Composite parent) {
		val group = createGroup(parent, 'Project:', 2, 1, GridData.FILL_HORIZONTAL) 
		projectText = createSingleText(group, 1) 
		projectText.addModifyListener = listener 
		projectButton = createPushButton(group, 'Browse', null) 
		projectButton.addSelectionListener = new DefaultSelectionListener {
			override widgetSelected(SelectionEvent e) {
				chooseXdockerProject => [
					if (it !== null) projectText.text = name
				]
			}
		}
		return group 
	}
	
	def protected Group createXdockerFileEditor(Composite parent) {
		createGroup(parent, 'Xdocker File:', 2, 1, GridData.FILL_HORIZONTAL) => [ group |
			group.enabled = true
			xdockerFileText = createSingleText(group, 1) => [
				addModifyListener = listener 
				enabled = true
			]
			xdockerFileButton = createPushButton(group, 'Browse', null) => [
				addSelectionListener = new DefaultSelectionListener {
					override widgetSelected(SelectionEvent e) {
						projectText.text.chooseXdockerFile => [
							if (it !== null) {
								xdockerFileText.text = projectRelativePath.toString
								if (projectText.text.nullOrEmpty) projectText.text = project.name
							}
						]
					}
				} 
			]
		]
	}
	
	def protected Group createDockerTagEditor(Composite parent) {
		return createGroup(parent, 'Docker Tag:', 2, 1, GridData.FILL_HORIZONTAL) => [group|
			group.enabled = true
			dockerTagText = createSingleText(group, 1) => [
				addModifyListener = listener
				enabled = true
			] 
		]
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#setDefaults(org.eclipse.
     * debug.core.ILaunchConfigurationWorkingCopy)
     */
	override void setDefaults(ILaunchConfigurationWorkingCopy configuration) {
		if (control !== null) {
			projectText.text = ''
			xdockerFileText.text = '' 
			dockerTagText.text = ''
			dockerTagText.enabled = false
			#[noCacheCheckButton, rmCheckButton, quiteCheckButton, pullCheckButton].forEach[
				enabled = false
				selection = false
			]
		}
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#initializeFrom(org.eclipse
     * .debug.core.ILaunchConfiguration)
     */
	override void initializeFrom(ILaunchConfiguration it) {
		if (it !== null) {
			projectText.text = getAttribute(ATTR_PROJECT, '')
			xdockerFileText.text = getAttribute(ATTR_XDOCKER, '') 
			paramsCheckButton.selection = getAttribute(ATTR_PARAMS, false) 
			dockerTagText.text = getAttribute(ATTR_TAG, '') 
			dockerTagText.editable = true
			noCacheCheckButton.selection = getAttribute(ATTR_NOCACHE, false) 
			rmCheckButton.selection = getAttribute(ATTR_RM, false) 
			quiteCheckButton.selection = getAttribute(ATTR_QUIET, false) 
			pullCheckButton.selection = getAttribute(ATTR_PULL, false) 
			#[dockerTagText, noCacheCheckButton, rmCheckButton, quiteCheckButton, pullCheckButton].forEach[
				enabled = paramsCheckButton.selection
			]
		}
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#performApply(org.eclipse
     * .debug.core.ILaunchConfigurationWorkingCopy)
     */
	override void performApply(ILaunchConfigurationWorkingCopy it) {
		if (it !== null) {
			setAttribute(ATTR_PROJECT, projectText.text) 
			setAttribute(ATTR_XDOCKER, xdockerFileText.text) 
			setAttribute(ATTR_PARAMS, paramsCheckButton.selection) 
			setAttribute(ATTR_TAG, dockerTagText.text) 
			setAttribute(ATTR_NOCACHE, noCacheCheckButton.selection) 
			setAttribute(ATTR_RM, rmCheckButton.selection) 
			setAttribute(ATTR_QUIET, quiteCheckButton.selection) 
			setAttribute(ATTR_PULL, pullCheckButton.selection) 
		}
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see ILaunchConfigurationTab#getName()
     */
	override String getName() {
		return NAME
	}
}