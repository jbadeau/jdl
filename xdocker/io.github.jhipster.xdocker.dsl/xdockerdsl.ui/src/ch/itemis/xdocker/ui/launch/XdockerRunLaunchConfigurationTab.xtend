/** 
 * Copyright (c) 2015 itemis Schweiz GmbH (http://www.itemis-schweiz.ch) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package ch.itemis.xdocker.ui.launch

import ch.itemis.xdocker.ui.launch.AbstractXdockerLaunchConfigurationTab.DefaultSelectionListener
import org.eclipse.debug.core.ILaunchConfiguration
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy
import org.eclipse.debug.ui.ILaunchConfigurationTab
import org.eclipse.swt.SWT
import org.eclipse.swt.events.SelectionAdapter
import org.eclipse.swt.events.SelectionEvent
import org.eclipse.swt.layout.GridData
import org.eclipse.swt.layout.GridLayout
import org.eclipse.swt.widgets.Button
import org.eclipse.swt.widgets.Composite
import org.eclipse.swt.widgets.Group
import org.eclipse.swt.widgets.Text

import static ch.itemis.xdocker.ui.launch.shortcut.XdockerRunLaunchConfigData.*
import static org.eclipse.debug.internal.ui.SWTFactory.*

/** 
 * Xdocker Run Launch Configuration Tab Class
 * 
 * @author Serano Colameo - Initial contribution and API
 */
@SuppressWarnings('restriction')
class XdockerRunLaunchConfigurationTab extends AbstractXdockerLaunchConfigurationTab {

	val NAME = 'Run Container'
	
	// mandatory parameters
	var Text imageNameText
	var Text commandText
	var Button browseImageButton
	// optional parameters
	var Button paramsCheckButton
	var Text nameText
	var Text portSpecText
	var Text envText
	var Button ttyCheckButton
	var Button detachedButton
	var Button keepStdinOpen
	var Button attachStdoutCheckButton
	var Button attachStderrCheckButton
	var Button publishAllPortsCheckButton
	var Button rmCheckButton
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#createControl(org.eclipse.swt.widgets.Composite)
     */
	override void createControl(Composite parent) {
		val mainGroup = parent.createMainGroup
		
		new GridData(GridData.FILL_HORIZONTAL) => [
			horizontalSpan = 2 
			mainGroup.layoutData = it 		
		]
		
		paramsCheckButton.selection = false
		
		mainGroup => [
			createNameEditor
			createPortSpecEditor
			createEnvEditor
			ttyCheckButton = createCheckButton('Allocate a pseudo-TTY (-t)')
			detachedButton = createCheckButton('Detached (-d)')
			keepStdinOpen = createCheckButton('Keep Stdin Open - Suppress verbose output generated by the containers (-i)')
			attachStdoutCheckButton = createCheckButton('Attach to STDOUT (-a STDOUT)')
			attachStderrCheckButton = createCheckButton('Attach to STDERR (-a STDERR)')
			publishAllPortsCheckButton = createCheckButton('Publish all exposed ports (-P)')
			rmCheckButton = createCheckButton('Remove intermediate containers after a successful build (--rm)')
		]

		val gd = new GridData(GridData.FILL_HORIZONTAL) => [horizontalSpan = 2]
		val dockerCheckButtons = #[ttyCheckButton, detachedButton, keepStdinOpen, 
			attachStdoutCheckButton, attachStderrCheckButton, publishAllPortsCheckButton, rmCheckButton
		]
		
		dockerCheckButtons.forEach[
			enabled = false
			layoutData = gd
			addSelectionListener = new SelectionAdapter {
				override void widgetSelected(SelectionEvent e) {
					updateLaunchConfigurationDialog
					launchConfigurationDialog.updateButtons
				}
			} 
		]
		
		val dockerElements = #[nameText, portSpecText, envText] + dockerCheckButtons
		
		paramsCheckButton.addSelectionListener = new SelectionAdapter {
			override void widgetSelected(SelectionEvent e) {
				dockerElements.forEach[enabled = paramsCheckButton.selection]
				updateLaunchConfigurationDialog
			}
		}
	}

	def private Composite createMainGroup(Composite parent) {
		val mainComposite = new Composite(parent, SWT.NONE) 
		val mainLayout = new GridLayout
		control = mainComposite 
		
		mainComposite => [
			layout = mainLayout
			layoutData = new GridData(GridData.FILL_HORIZONTAL)
			font = parent.font
			createImageNameEditor
			createCommandEditor		
			createCheckButton('Docker Run Parameter') => [
				paramsCheckButton = it
				addSelectionListener = new DefaultSelectionListener {
					override widgetSelected(SelectionEvent e) {
						launchConfigurationDialog.updateButtons
					}
				}	
			]
		]
		
		return new Group(mainComposite, SWT.NONE) => [
			font = mainComposite.font
			layout = mainLayout
		]
	}
	
	def private Group createImageNameEditor(Composite parent) {
		return createGroup(parent, 'Image name:', 2, 1, GridData.FILL_HORIZONTAL) => [group|
			group.enabled = true
			imageNameText = createSingleText(group, 1) => [
				addModifyListener = listener
			] 
			browseImageButton = createPushButton(group, 'Browse...', null) 
			browseImageButton.addSelectionListener = new DefaultSelectionListener {
				override widgetSelected(SelectionEvent e) {
					imageNameText.text = chooseDockerImage ?: imageNameText.text
				}
			}
		]
	}	
	
	def private Group createCommandEditor(Composite parent) {
		return createGroup(parent, 'Command:', 2, 1, GridData.FILL_HORIZONTAL) => [group|
			group.enabled = true
			commandText = createSingleText(group, 1) => [
				addModifyListener = listener
				enabled = true
			] 
		]
	}	

	def private Group createNameEditor(Composite parent) {
		return createGroup(parent, 'Name:', 2, 1, GridData.FILL_HORIZONTAL) => [group|
			group.enabled = true
			nameText = createSingleText(group, 1) => [
				addModifyListener = listener
				enabled = true
			] 
		]
	}	

	def private Group createPortSpecEditor(Composite parent) {
		return createGroup(parent, 'Ports (<host_port1>:<container_port1> <host_port2>:<container_port2>):', 2, 1, GridData.FILL_HORIZONTAL) => [group|
			group.enabled = true
			portSpecText = createSingleText(group, 1) => [
				addModifyListener = listener
				enabled = true
			] 
		]
	}	

	def private Group createEnvEditor(Composite parent) {
		return createGroup(parent, 'Envs (USR=root PWD=secret ...):', 2, 1, GridData.FILL_HORIZONTAL) => [group|
			group.enabled = true
			envText = createSingleText(group, 1) => [
				addModifyListener = listener
				enabled = true
			] 
		]
	}	

	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#setDefaults(org.eclipse.
     * debug.core.ILaunchConfigurationWorkingCopy)
     */
	override void setDefaults(ILaunchConfigurationWorkingCopy configuration) {
		if (control !== null) {
			imageNameText.text = ''
			commandText.text = '' 
			#[nameText, portSpecText, envText].forEach[
				enabled = false
				text = ''
			]
			#[paramsCheckButton, ttyCheckButton, detachedButton, keepStdinOpen, attachStdoutCheckButton, 
			  attachStderrCheckButton, publishAllPortsCheckButton, rmCheckButton
			].forEach[
				enabled = false
				selection = false
			]
		}
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#initializeFrom(org.eclipse
     * .debug.core.ILaunchConfiguration)
     */
	override void initializeFrom(ILaunchConfiguration it) {
		if (it !== null) {
			imageNameText.text = getAttribute(ATTR_IMAGE, '')
			commandText.text = getAttribute(ATTR_CMD, '')
			paramsCheckButton.selection = getAttribute(ATTR_PARAMS, false) 
			nameText.text = getAttribute(ATTR_NAME,'') 
			portSpecText.text = getAttribute(ATTR_PORT_SPEC, '')
			envText.text = getAttribute(ATTR_ENV, '')
			ttyCheckButton.selection = getAttribute(ATTR_TTY, false) 
			detachedButton.selection = getAttribute(ATTR_DETACHED, false) 
			keepStdinOpen.selection = getAttribute(ATTR_STDIN, false) 
			attachStdoutCheckButton.selection = getAttribute(ATTR_ATTACH_STDOUT, false) 
			attachStderrCheckButton.selection = getAttribute(ATTR_ATTACH_STDERR, false) 
			publishAllPortsCheckButton.selection = getAttribute(ATTR_PUPLISH_PORTS, false)
			rmCheckButton.selection = getAttribute(ATTR_REMOVE, false)
			#[ttyCheckButton, detachedButton, keepStdinOpen, attachStdoutCheckButton, 
			  attachStderrCheckButton, publishAllPortsCheckButton, rmCheckButton
			].forEach[
				enabled = paramsCheckButton.selection
			]
		}
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see
     * org.eclipse.debug.ui.ILaunchConfigurationTab#performApply(org.eclipse
     * .debug.core.ILaunchConfigurationWorkingCopy)
     */
	override void performApply(ILaunchConfigurationWorkingCopy it) {
		if (it !== null) {
			setAttribute(ATTR_IMAGE, imageNameText.text) 
			setAttribute(ATTR_CMD, commandText.text) 
			setAttribute(ATTR_PARAMS, paramsCheckButton.selection) 
			setAttribute(ATTR_NAME, nameText.text) 
			setAttribute(ATTR_PORT_SPEC, portSpecText.text) 
			setAttribute(ATTR_ENV, envText.text) 
			setAttribute(ATTR_TTY, ttyCheckButton.selection) 
			setAttribute(ATTR_DETACHED, detachedButton.selection) 
			setAttribute(ATTR_STDIN, keepStdinOpen.selection) 
			setAttribute(ATTR_ATTACH_STDOUT, attachStdoutCheckButton.selection) 
			setAttribute(ATTR_ATTACH_STDERR, attachStderrCheckButton.selection) 
			setAttribute(ATTR_PUPLISH_PORTS, publishAllPortsCheckButton.selection) 
			setAttribute(ATTR_REMOVE, rmCheckButton.selection)
		}
	}
	
	/*
     * (non-Javadoc)
     * 
     * @see ILaunchConfigurationTab#getName()
     */
	override String getName() {
		return NAME
	}
}