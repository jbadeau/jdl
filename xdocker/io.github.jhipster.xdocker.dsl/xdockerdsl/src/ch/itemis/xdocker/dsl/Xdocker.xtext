/*******************************************************************************
 * Copyright (c) 2015 itemis Schweiz GmbH (http://www.itemis-schweiz.ch) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
 
/**
 * eXtended Dockerfile Language
 * 
 * @author Serano Colameo - Initial contribution
 */
grammar ch.itemis.xdocker.Xdocker hidden(WS, SL_COMMENT, EQ) 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate xdocker "http://www.itemis-schweiz.ch/xdocker/Xdocker"

/*****************************************************************************************
 * Main Rules
 *****************************************************************************************/
Xdocker:
	(statements+=Statement)*;

Statement:
	  FromStatement
	| MaintainerStatement
	| RunStatement
	| CmdStatement
	| LabelStatement
	| ExposeStatement
	| EnvStatement
	| AddStatement
	| CopyStatement
	| EntrypointStatement
	| VolumeStatement
	| UserStatement
	| WorkdirStatement
	| OnbuildStatement;

FromStatement:
	'FROM' image=LiteralValue (qualifier=ImageQualifier)?;

MaintainerStatement:
	'MAINTAINER' (author+=LiteralValue)+;

RunStatement:
	'RUN' args=Arguments;

CmdStatement:
	'CMD' args=Arguments;
	
LabelStatement:
	'LABEL' labels=KeyValueArguments;

ExposeStatement:
	'EXPOSE' portNumbers=PortNumberList;

EnvStatement:
	'ENV' vars=KeyValueArguments;

AddStatement:
	'ADD' params=Parameters;

CopyStatement:
	'COPY' params=Parameters;

EntrypointStatement:
	'ENTRYPOINT' args=Arguments;

VolumeStatement:
	'VOLUME' volume=(LiteralValue | ArgumentArray);

UserStatement:
	'USER' user=LiteralValue;

WorkdirStatement:
	'WORKDIR' path=LiteralValue;

OnbuildStatement:
	'ONBUILD' statement=Statement;

/*****************************************************************************************
 * Base Definitions
 *****************************************************************************************/
ImageQualifier:
	TagQualifier | DigestQualifier;

TagQualifier:
	':' tag=LiteralValue;

DigestQualifier:
	'@' digest=LiteralValue;
 
KeyValueArguments:
	KeyValueList | ArgumentArray;

KeyValueList:
	(keyValues+=KeyValue)+;

Parameters:
	SourcesDestValue | ArgumentArray;

SourcesDestValue:
	(sources+=LiteralValue)+ dst=LiteralValue;

Arguments:
	ArgumentList | ArgumentArray;

ArgumentArray:
	'[' WS? values+=StringValue (WS? ',' WS? values+=StringValue)* WS? ']';

ArgumentList:
	WS? values+=LiteralValue (WS? values+=LiteralValue)*;

PortNumberList:
	WS? ports+=PortNumber (WS? ports+=PortNumber)*;

KeyValue:
	name=LiteralValue (hasEq?=EQ)? value=LiteralValue;

LiteralValue:
	name=Value;

StringValue:
	name=String;

Value:
	Literal | String;

PortNumber returns ecore::EInt: 
	Number;

/*****************************************************************************************
 * Terminal Definitions
 *****************************************************************************************/
String returns ecore::EString:
	'"' (ANY | WS)* '"';

Literal returns ecore::EString:
	ANY;

Number returns ecore::EInt:
	ANY;

terminal EQ returns ecore::EString:
	'=';
	
terminal ANY returns ecore::EString:
	!(' '| '\t' | '\r' | '\n' | '"')+;

terminal WS returns ecore::EString:
	(' ' | '\t' | '\r' | '\n' | '\\')+;

terminal SL_COMMENT:
	'#' !('\n' | '\r')* ('\r'? '\n')?;
	
/*****************************************************************************************
 * End of Grammar
 *****************************************************************************************/